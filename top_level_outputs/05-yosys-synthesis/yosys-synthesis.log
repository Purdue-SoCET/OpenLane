
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.33 (git sha1 2584903a060, clang++ 11.1.0 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.
Reading SCL library '/root/.volare/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib' as a blackboxâ¦

1. Executing Liberty frontend: /root/.volare/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib
Imported 428 cell types from liberty file.

2. Executing Verilog-2005 frontend: /root/nixopenlane/openlane2/desflow1/flex_counter.sv
Parsing SystemVerilog input from `/root/nixopenlane/openlane2/desflow1/flex_counter.sv' to AST representation.
Generating RTLIL representation for module `\flex_counter'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: /root/nixopenlane/openlane2/desflow1/synchronizer.sv
Parsing SystemVerilog input from `/root/nixopenlane/openlane2/desflow1/synchronizer.sv' to AST representation.
Generating RTLIL representation for module `\synchronizer'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: /root/nixopenlane/openlane2/desflow1/top_level.sv
Parsing SystemVerilog input from `/root/nixopenlane/openlane2/desflow1/top_level.sv' to AST representation.
Generating RTLIL representation for module `\top_level'.
Successfully finished Verilog frontend.

5. Generating Graphviz representation of design.
Writing dot description to `/root/nixopenlane/openlane2/runs/RUN_2023-11-30_18-20-58/05-yosys-synthesis/hierarchy.dot'.
Dumping module flex_counter to page 1.

6. Executing HIERARCHY pass (managing design hierarchy).

6.1. Analyzing design hierarchy..
Top module:  \flex_counter

6.2. Analyzing design hierarchy..
Top module:  \flex_counter
Removing unused module `\top_level'.
Removing unused module `\synchronizer'.
Removed 2 unused modules.
Renaming module flex_counter to flex_counter.

7. Executing HIERARCHY pass (managing design hierarchy).

7.1. Analyzing design hierarchy..
Top module:  \flex_counter

7.2. Analyzing design hierarchy..
Top module:  \flex_counter
Removed 0 unused modules.

8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

9. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 5 switch rules as full_case in process $proc$/root/nixopenlane/openlane2/desflow1/flex_counter.sv:0$8 in module flex_counter.
Marked 2 switch rules as full_case in process $proc$/root/nixopenlane/openlane2/desflow1/flex_counter.sv:0$3 in module flex_counter.
Marked 1 switch rules as full_case in process $proc$/root/nixopenlane/openlane2/desflow1/flex_counter.sv:13$1 in module flex_counter.
Removed a total of 0 dead cases.

10. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 2 redundant assignments.
Promoted 2 assignments to connections.

11. Executing PROC_INIT pass (extract init attributes).

12. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \nRST in `\flex_counter.$proc$/root/nixopenlane/openlane2/desflow1/flex_counter.sv:13$1'.

13. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~7 debug messages>

14. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\flex_counter.$proc$/root/nixopenlane/openlane2/desflow1/flex_counter.sv:0$8'.
     1/5: $5\next_count[3:0]
     2/5: $4\next_count[3:0]
     3/5: $3\next_count[3:0]
     4/5: $2\next_count[3:0]
     5/5: $1\next_count[3:0]
Creating decoders for process `\flex_counter.$proc$/root/nixopenlane/openlane2/desflow1/flex_counter.sv:0$3'.
     1/2: $2\next_flag[0:0]
     2/2: $1\next_flag[0:0]
Creating decoders for process `\flex_counter.$proc$/root/nixopenlane/openlane2/desflow1/flex_counter.sv:13$1'.
     1/2: $0\count[3:0]
     2/2: $0\flag[0:0]

15. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\flex_counter.\next_count' from process `\flex_counter.$proc$/root/nixopenlane/openlane2/desflow1/flex_counter.sv:0$8'.
No latch inferred for signal `\flex_counter.\next_flag' from process `\flex_counter.$proc$/root/nixopenlane/openlane2/desflow1/flex_counter.sv:0$3'.

16. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\flex_counter.\count' using process `\flex_counter.$proc$/root/nixopenlane/openlane2/desflow1/flex_counter.sv:13$1'.
  created $adff cell `$procdff$68' with positive edge clock and negative level reset.
Creating register for signal `\flex_counter.\flag' using process `\flex_counter.$proc$/root/nixopenlane/openlane2/desflow1/flex_counter.sv:13$1'.
  created $adff cell `$procdff$69' with positive edge clock and negative level reset.

17. Executing PROC_MEMWR pass (convert process memory writes to cells).

18. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 5 empty switches in `\flex_counter.$proc$/root/nixopenlane/openlane2/desflow1/flex_counter.sv:0$8'.
Removing empty process `flex_counter.$proc$/root/nixopenlane/openlane2/desflow1/flex_counter.sv:0$8'.
Found and cleaned up 2 empty switches in `\flex_counter.$proc$/root/nixopenlane/openlane2/desflow1/flex_counter.sv:0$3'.
Removing empty process `flex_counter.$proc$/root/nixopenlane/openlane2/desflow1/flex_counter.sv:0$3'.
Removing empty process `flex_counter.$proc$/root/nixopenlane/openlane2/desflow1/flex_counter.sv:13$1'.
Cleaned up 7 empty switches.

19. Executing CHECK pass (checking for obvious problems).
Checking module flex_counter...
Found and reported 0 problems.

20. Executing OPT_EXPR pass (perform const folding).
Optimizing module flex_counter.
<suppressed ~12 debug messages>

21. Executing FLATTEN pass (flatten design).

22. Executing OPT_EXPR pass (perform const folding).
Optimizing module flex_counter.

23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \flex_counter..
Removed 3 unused cells and 34 unused wires.
<suppressed ~4 debug messages>

24. Executing OPT pass (performing simple optimizations).

24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module flex_counter.

24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\flex_counter'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

24.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \flex_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$23.
    dead port 2/2 on $mux $procmux$25.
    dead port 1/2 on $mux $procmux$27.
    dead port 2/2 on $mux $procmux$35.
    dead port 2/2 on $mux $procmux$37.
    dead port 1/2 on $mux $procmux$39.
    dead port 2/2 on $mux $procmux$46.
    dead port 1/2 on $mux $procmux$48.
    dead port 1/2 on $mux $procmux$54.
    dead port 1/2 on $mux $procmux$63.
Removed 10 multiplexer ports.
<suppressed ~2 debug messages>

24.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \flex_counter.
Performed a total of 0 changes.

24.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\flex_counter'.
Removed a total of 0 cells.

24.6. Executing OPT_DFF pass (perform DFF optimizations).

24.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \flex_counter..
Removed 0 unused cells and 11 unused wires.
<suppressed ~1 debug messages>

24.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module flex_counter.

24.9. Rerunning OPT passes. (Maybe there is more to do..)

24.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \flex_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

24.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \flex_counter.
Performed a total of 0 changes.

24.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\flex_counter'.
Removed a total of 0 cells.

24.13. Executing OPT_DFF pass (perform DFF optimizations).

24.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \flex_counter..

24.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module flex_counter.

24.16. Finished OPT passes. (There is nothing left to do.)

25. Executing FSM pass (extract and optimize FSM).

25.1. Executing FSM_DETECT pass (finding FSMs in design).

25.2. Executing FSM_EXTRACT pass (extracting FSM from design).

25.3. Executing FSM_OPT pass (simple optimizations of FSMs).

25.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \flex_counter..

25.5. Executing FSM_OPT pass (simple optimizations of FSMs).

25.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

25.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

25.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

26. Executing OPT pass (performing simple optimizations).

26.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module flex_counter.

26.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\flex_counter'.
Removed a total of 0 cells.

26.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \flex_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

26.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \flex_counter.
Performed a total of 0 changes.

26.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\flex_counter'.
Removed a total of 0 cells.

26.6. Executing OPT_DFF pass (perform DFF optimizations).

26.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \flex_counter..

26.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module flex_counter.

26.9. Finished OPT passes. (There is nothing left to do.)

27. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell flex_counter.$add$/root/nixopenlane/openlane2/desflow1/flex_counter.sv:57$14 ($add).
Removed top 28 bits (of 32) from port Y of cell flex_counter.$add$/root/nixopenlane/openlane2/desflow1/flex_counter.sv:57$14 ($add).
Removed top 3 bits (of 4) from mux cell flex_counter.$procmux$33 ($mux).
Removed top 3 bits (of 4) from wire flex_counter.$4\next_count[3:0].
Removed top 28 bits (of 32) from wire flex_counter.$add$/root/nixopenlane/openlane2/desflow1/flex_counter.sv:57$14_Y.

28. Executing PEEPOPT pass (run peephole optimizers).

29. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \flex_counter..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

30. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module flex_counter:
  creating $macc model for $add$/root/nixopenlane/openlane2/desflow1/flex_counter.sv:57$14 ($add).
  creating $alu model for $macc $add$/root/nixopenlane/openlane2/desflow1/flex_counter.sv:57$14.
  creating $alu model for $gt$/root/nixopenlane/openlane2/desflow1/flex_counter.sv:53$13 ($gt): new $alu
  creating $alu model for $eq$/root/nixopenlane/openlane2/desflow1/flex_counter.sv:45$11 ($eq): merged with $gt$/root/nixopenlane/openlane2/desflow1/flex_counter.sv:53$13.
  creating $alu cell for $gt$/root/nixopenlane/openlane2/desflow1/flex_counter.sv:53$13, $eq$/root/nixopenlane/openlane2/desflow1/flex_counter.sv:45$11: $auto$alumacc.cc:485:replace_alu$73
  creating $alu cell for $add$/root/nixopenlane/openlane2/desflow1/flex_counter.sv:57$14: $auto$alumacc.cc:485:replace_alu$80
  created 2 $alu and 0 $macc cells.

31. Executing SHARE pass (SAT-based resource sharing).

32. Executing OPT pass (performing simple optimizations).

32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module flex_counter.
<suppressed ~1 debug messages>

32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\flex_counter'.
Removed a total of 0 cells.

32.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \flex_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

32.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \flex_counter.
Performed a total of 0 changes.

32.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\flex_counter'.
Removed a total of 0 cells.

32.6. Executing OPT_DFF pass (perform DFF optimizations).

32.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \flex_counter..
Removed 1 unused cells and 3 unused wires.
<suppressed ~2 debug messages>

32.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module flex_counter.

32.9. Rerunning OPT passes. (Maybe there is more to do..)

32.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \flex_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

32.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \flex_counter.
Performed a total of 0 changes.

32.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\flex_counter'.
Removed a total of 0 cells.

32.13. Executing OPT_DFF pass (perform DFF optimizations).

32.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \flex_counter..

32.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module flex_counter.

32.16. Finished OPT passes. (There is nothing left to do.)

33. Executing MEMORY pass.

33.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

33.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

33.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

33.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

33.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

33.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \flex_counter..

33.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

33.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

33.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \flex_counter..

33.10. Executing MEMORY_COLLECT pass (generating $mem cells).

34. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \flex_counter..

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module flex_counter.
<suppressed ~2 debug messages>

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\flex_counter'.
Removed a total of 0 cells.

35.3. Executing OPT_DFF pass (perform DFF optimizations).

35.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \flex_counter..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

35.5. Finished fast OPT passes.

36. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

37. Executing OPT pass (performing simple optimizations).

37.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module flex_counter.

37.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\flex_counter'.
Removed a total of 0 cells.

37.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \flex_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

37.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \flex_counter.
Performed a total of 0 changes.

37.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\flex_counter'.
Removed a total of 0 cells.

37.6. Executing OPT_SHARE pass.

37.7. Executing OPT_DFF pass (perform DFF optimizations).

37.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \flex_counter..

37.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module flex_counter.

37.10. Finished OPT passes. (There is nothing left to do.)

38. Executing TECHMAP pass (map to technology primitives).

38.1. Executing Verilog-2005 frontend: /nix/store/rdd3k15bm7qkhpq4kk4ghkxdqq3zjd1r-yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nix/store/rdd3k15bm7qkhpq4kk4ghkxdqq3zjd1r-yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

38.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $logic_or.
Using template $paramod$32a7b7b86c07519b7537abc18e96f0331f97914d\_90_alu for cells of type $alu.
Using template $paramod$740b056ede97228d3eae64ea2fdc81f0a33e0fe7\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~272 debug messages>

39. Executing OPT pass (performing simple optimizations).

39.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module flex_counter.
<suppressed ~29 debug messages>

39.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\flex_counter'.
<suppressed ~18 debug messages>
Removed a total of 6 cells.

39.3. Executing OPT_DFF pass (perform DFF optimizations).

39.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \flex_counter..
Removed 8 unused cells and 65 unused wires.
<suppressed ~9 debug messages>

39.5. Finished fast OPT passes.

40. Executing ABC pass (technology mapping using ABC).

40.1. Extracting gate netlist of module `\flex_counter' to `<abc-temp-dir>/input.blif'..
Extracted 57 gates and 69 wires to a netlist network with 10 inputs and 5 outputs.

40.1.1. Executing ABC.
Running ABC command: "/nix/store/p9vsk7iilm6h471bwb1vl688w4r88dg7-yosys-abc/bin/abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

40.1.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               NOR cells:        3
ABC RESULTS:               NOT cells:        4
ABC RESULTS:               MUX cells:        5
ABC RESULTS:              XNOR cells:        3
ABC RESULTS:               XOR cells:        8
ABC RESULTS:                OR cells:        7
ABC RESULTS:             ORNOT cells:        5
ABC RESULTS:            ANDNOT cells:       18
ABC RESULTS:        internal signals:       54
ABC RESULTS:           input signals:       10
ABC RESULTS:          output signals:        5
Removing temp directory.

41. Executing OPT pass (performing simple optimizations).

41.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module flex_counter.
<suppressed ~4 debug messages>

41.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\flex_counter'.
Removed a total of 0 cells.

41.3. Executing OPT_DFF pass (perform DFF optimizations).

41.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \flex_counter..
Removed 1 unused cells and 39 unused wires.
<suppressed ~2 debug messages>

41.5. Finished fast OPT passes.

42. Executing HIERARCHY pass (managing design hierarchy).

42.1. Analyzing design hierarchy..
Top module:  \flex_counter

42.2. Analyzing design hierarchy..
Top module:  \flex_counter
Removed 0 unused modules.

43. Printing statistics.

=== flex_counter ===

   Number of wires:                 57
   Number of wire bits:             66
   Number of public wires:           9
   Number of public wire bits:      18
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 58
     $_ANDNOT_                      18
     $_DFF_PN0_                      5
     $_MUX_                          5
     $_NAND_                         1
     $_NOR_                          3
     $_NOT_                          3
     $_ORNOT_                        5
     $_OR_                           7
     $_XNOR_                         3
     $_XOR_                          8

44. Executing CHECK pass (checking for obvious problems).
Checking module flex_counter...
Found and reported 0 problems.

45. Generating Graphviz representation of design.
Writing dot description to `/root/nixopenlane/openlane2/runs/RUN_2023-11-30_18-20-58/05-yosys-synthesis/post_techmap.dot'.
Dumping module flex_counter to page 1.

46. Executing SHARE pass (SAT-based resource sharing).

47. Executing OPT pass (performing simple optimizations).

47.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module flex_counter.

47.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\flex_counter'.
Removed a total of 0 cells.

47.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \flex_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

47.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \flex_counter.
Performed a total of 0 changes.

47.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\flex_counter'.
Removed a total of 0 cells.

47.6. Executing OPT_DFF pass (perform DFF optimizations).

47.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \flex_counter..

47.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module flex_counter.

47.9. Finished OPT passes. (There is nothing left to do.)

48. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \flex_counter..
{
   "creator": "Yosys 0.33 (git sha1 2584903a060, clang++ 11.1.0 -fPIC -Os)",
   "invocation": "stat -json ",
   "modules": {
      "\\flex_counter": {
         "num_wires":         57,
         "num_wire_bits":     66,
         "num_pub_wires":     9,
         "num_pub_wire_bits": 18,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         58,
         "num_cells_by_type": {
            "$_ANDNOT_": 18,
            "$_DFF_PN0_": 5,
            "$_MUX_": 5,
            "$_NAND_": 1,
            "$_NOR_": 3,
            "$_NOT_": 3,
            "$_ORNOT_": 5,
            "$_OR_": 7,
            "$_XNOR_": 3,
            "$_XOR_": 8
         }
      }
   },
      "design": {
         "num_wires":         57,
         "num_wire_bits":     66,
         "num_pub_wires":     9,
         "num_pub_wire_bits": 18,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         58,
         "num_cells_by_type": {
            "$_ANDNOT_": 18,
            "$_DFF_PN0_": 5,
            "$_MUX_": 5,
            "$_NAND_": 1,
            "$_NOR_": 3,
            "$_NOT_": 3,
            "$_ORNOT_": 5,
            "$_OR_": 7,
            "$_XNOR_": 3,
            "$_XOR_": 8
         }
      }
}

[INFO] Applying latch mapping from '/root/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v'â¦

49. Executing TECHMAP pass (map to technology primitives).

49.1. Executing Verilog-2005 frontend: /root/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/root/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

49.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

50. Executing SIMPLEMAP pass (map simple cells to gate primitives).

51. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

51.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\flex_counter':
  mapped 5 $_DFF_PN0_ cells to \sky130_fd_sc_hd__dfrtp_2 cells.
{
   "creator": "Yosys 0.33 (git sha1 2584903a060, clang++ 11.1.0 -fPIC -Os)",
   "invocation": "stat -json ",
   "modules": {
      "\\flex_counter": {
         "num_wires":         57,
         "num_wire_bits":     66,
         "num_pub_wires":     9,
         "num_pub_wire_bits": 18,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         58,
         "num_cells_by_type": {
            "$_ANDNOT_": 18,
            "$_MUX_": 5,
            "$_NAND_": 1,
            "$_NOR_": 3,
            "$_NOT_": 3,
            "$_ORNOT_": 5,
            "$_OR_": 7,
            "$_XNOR_": 3,
            "$_XOR_": 8,
            "sky130_fd_sc_hd__dfrtp_2": 5
         }
      }
   },
      "design": {
         "num_wires":         57,
         "num_wire_bits":     66,
         "num_pub_wires":     9,
         "num_pub_wire_bits": 18,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         58,
         "num_cells_by_type": {
            "$_ANDNOT_": 18,
            "$_MUX_": 5,
            "$_NAND_": 1,
            "$_NOR_": 3,
            "$_NOT_": 3,
            "$_ORNOT_": 5,
            "$_OR_": 7,
            "$_XNOR_": 3,
            "$_XOR_": 8,
            "sky130_fd_sc_hd__dfrtp_2": 5
         }
      }
}

[INFO] USING STRATEGY AREA 0

52. Executing ABC pass (technology mapping using ABC).

52.1. Extracting gate netlist of module `\flex_counter' to `/run/user/0/yosys-abc-HKLNJZ/input.blif'..
Extracted 53 gates and 63 wires to a netlist network with 10 inputs and 5 outputs.

52.1.1. Executing ABC.
Running ABC command: "/nix/store/p9vsk7iilm6h471bwb1vl688w4r88dg7-yosys-abc/bin/abc" -s -f /run/user/0/yosys-abc-HKLNJZ/abc.script 2>&1
ABC: ABC command line: "source /run/user/0/yosys-abc-HKLNJZ/abc.script".
ABC: 
ABC: + read_blif /run/user/0/yosys-abc-HKLNJZ/input.blif 
ABC: + read_lib -w /root/nixopenlane/openlane2/runs/RUN_2023-11-30_18-20-58/tmp/2c0b85e18ff54b18b0c8c018899f2c2e.lib 
ABC: Parsing finished successfully.  Parsing time =     0.08 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130_fd_sc_hd__tt_025C_1v80" from "/root/nixopenlane/openlane2/runs/RUN_2023-11-30_18-20-58/tmp/2c0b85e18ff54b18b0c8c018899f2c2e.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.13 sec
ABC: Memory =    9.54 MB. Time =     0.13 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /root/nixopenlane/openlane2/runs/RUN_2023-11-30_18-20-58/05-yosys-synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2/Y".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /root/nixopenlane/openlane2/runs/RUN_2023-11-30_18-20-58/05-yosys-synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + retime -D -D 10000 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 10000 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 10 -S 750.0 
ABC: Cannot find the default PI driving cell (sky130_fd_sc_hd__inv_2/Y) in the library.
ABC: + upsize -D 10000 
ABC: Cannot find the default PI driving cell (sky130_fd_sc_hd__inv_2/Y) in the library.
ABC: Current delay (2181.34 ps) does not exceed the target delay (10000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 10000 
ABC: Cannot find the default PI driving cell (sky130_fd_sc_hd__inv_2/Y) in the library.
ABC: + stime -p 
ABC: Cannot find the default PI driving cell (sky130_fd_sc_hd__inv_2/Y) in the library.
ABC: WireLoad = "none"  Gates =     42 ( 16.7 %)   Cap =  9.8 ff (  3.0 %)   Area =      361.60 ( 83.3 %)   Delay =  2181.93 ps  ( 23.8 %)               
ABC: Path  0 --       6 : 0    4 pi                         A =   0.00  Df =   0.0   -0.0 ps  S =   0.0 ps  Cin =  0.0 ff  Cout =   9.3 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --      19 : 2    2 sky130_fd_sc_hd__and2b_2   A =   8.76  Df = 193.2   -1.8 ps  S =  46.3 ps  Cin =  1.6 ff  Cout =   5.1 ff  Cmax = 310.4 ff  G =  299  
ABC: Path  2 --      21 : 4    2 sky130_fd_sc_hd__a211o_2   A =  10.01  Df = 505.8 -192.4 ps  S =  58.6 ps  Cin =  2.4 ff  Cout =   7.2 ff  Cmax = 325.0 ff  G =  286  
ABC: Path  3 --      27 : 5    2 sky130_fd_sc_hd__a2111oi_2 A =  15.01  Df = 887.7 -470.1 ps  S = 333.6 ps  Cin =  4.6 ff  Cout =   6.2 ff  Cmax =  56.8 ff  G =  128  
ABC: Path  4 --      28 : 3    1 sky130_fd_sc_hd__or3b_2    A =   8.76  Df =1356.3 -752.0 ps  S =  73.8 ps  Cin =  1.5 ff  Cout =   2.5 ff  Cmax = 269.2 ff  G =  158  
ABC: Path  5 --      34 : 3    3 sky130_fd_sc_hd__a21bo_2   A =  10.01  Df =1568.5 -421.1 ps  S =  56.7 ps  Cin =  2.0 ff  Cout =   7.6 ff  Cmax = 288.4 ff  G =  363  
ABC: Path  6 --      52 : 3    1 sky130_fd_sc_hd__a21oi_2   A =   8.76  Df =1689.2 -492.7 ps  S = 100.4 ps  Cin =  4.6 ff  Cout =   4.6 ff  Cmax = 128.2 ff  G =   94  
ABC: Path  7 --      56 : 5    1 sky130_fd_sc_hd__o2111ai_2 A =  15.01  Df =1952.9 -150.3 ps  S = 165.7 ps  Cin =  4.3 ff  Cout =   5.1 ff  Cmax = 129.1 ff  G =  111  
ABC: Path  8 --      57 : 3    1 sky130_fd_sc_hd__a21oi_2   A =   8.76  Df =2181.9  -68.8 ps  S = 417.6 ps  Cin =  4.6 ff  Cout =  33.4 ff  Cmax = 128.2 ff  G =  733  
ABC: Start-point = pi5 (\count [1]).  End-point = po4 (\next_flag).
ABC: + print_stats -m 
ABC: netlist                       : i/o =   10/    5  lat =    0  nd =    42  edge =    109  area =361.63  delay = 9.00  lev = 9
ABC: + write_blif /run/user/0/yosys-abc-HKLNJZ/output.blif 

52.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a211o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or2b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a2bb2o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a2111oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o31a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or3b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a21bo_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o31ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o2111ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:        5
ABC RESULTS:        internal signals:       48
ABC RESULTS:           input signals:       10
ABC RESULTS:          output signals:        5
Removing temp directory.

53. Executing SETUNDEF pass (replace undef values with defined constants).

54. Executing HILOMAP pass (mapping to constant drivers).
Warning: Selection "sky130_fd_sc_hd__conb_1" did not match any module.
Warning: Selection "LO" did not match any object.

55. Executing SPLITNETS pass (splitting up multi-bit signals).

56. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \flex_counter..
Removed 0 unused cells and 63 unused wires.
<suppressed ~1 debug messages>

57. Executing INSBUF pass (insert buffer cells for connected wires).

58. Executing CHECK pass (checking for obvious problems).
Checking module flex_counter...
Found and reported 0 problems.
{
   "creator": "Yosys 0.33 (git sha1 2584903a060, clang++ 11.1.0 -fPIC -Os)",
   "invocation": "stat -json ",
   "modules": {
      "\\flex_counter": {
         "num_wires":         49,
         "num_wire_bits":     55,
         "num_pub_wires":     12,
         "num_pub_wire_bits": 18,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         47,
         "num_cells_by_type": {
            "sky130_fd_sc_hd__a2111oi_2": 1,
            "sky130_fd_sc_hd__a211o_2": 1,
            "sky130_fd_sc_hd__a21bo_2": 1,
            "sky130_fd_sc_hd__a21o_2": 2,
            "sky130_fd_sc_hd__a21oi_2": 5,
            "sky130_fd_sc_hd__a2bb2o_2": 1,
            "sky130_fd_sc_hd__and2_2": 1,
            "sky130_fd_sc_hd__and2b_2": 2,
            "sky130_fd_sc_hd__and3_2": 4,
            "sky130_fd_sc_hd__buf_1": 3,
            "sky130_fd_sc_hd__dfrtp_2": 5,
            "sky130_fd_sc_hd__inv_2": 4,
            "sky130_fd_sc_hd__nand2_2": 2,
            "sky130_fd_sc_hd__nor2_2": 1,
            "sky130_fd_sc_hd__o2111ai_2": 1,
            "sky130_fd_sc_hd__o211a_2": 1,
            "sky130_fd_sc_hd__o21a_2": 1,
            "sky130_fd_sc_hd__o31a_2": 1,
            "sky130_fd_sc_hd__o31ai_2": 1,
            "sky130_fd_sc_hd__or2_2": 1,
            "sky130_fd_sc_hd__or2b_2": 2,
            "sky130_fd_sc_hd__or3_2": 1,
            "sky130_fd_sc_hd__or3b_2": 2,
            "sky130_fd_sc_hd__xnor2_2": 3
         }
      }
   },
      "design": {
         "num_wires":         49,
         "num_wire_bits":     55,
         "num_pub_wires":     12,
         "num_pub_wire_bits": 18,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         47,
         "num_cells_by_type": {
            "sky130_fd_sc_hd__a2111oi_2": 1,
            "sky130_fd_sc_hd__a211o_2": 1,
            "sky130_fd_sc_hd__a21bo_2": 1,
            "sky130_fd_sc_hd__a21o_2": 2,
            "sky130_fd_sc_hd__a21oi_2": 5,
            "sky130_fd_sc_hd__a2bb2o_2": 1,
            "sky130_fd_sc_hd__and2_2": 1,
            "sky130_fd_sc_hd__and2b_2": 2,
            "sky130_fd_sc_hd__and3_2": 4,
            "sky130_fd_sc_hd__buf_1": 3,
            "sky130_fd_sc_hd__dfrtp_2": 5,
            "sky130_fd_sc_hd__inv_2": 4,
            "sky130_fd_sc_hd__nand2_2": 2,
            "sky130_fd_sc_hd__nor2_2": 1,
            "sky130_fd_sc_hd__o2111ai_2": 1,
            "sky130_fd_sc_hd__o211a_2": 1,
            "sky130_fd_sc_hd__o21a_2": 1,
            "sky130_fd_sc_hd__o31a_2": 1,
            "sky130_fd_sc_hd__o31ai_2": 1,
            "sky130_fd_sc_hd__or2_2": 1,
            "sky130_fd_sc_hd__or2b_2": 2,
            "sky130_fd_sc_hd__or3_2": 1,
            "sky130_fd_sc_hd__or3b_2": 2,
            "sky130_fd_sc_hd__xnor2_2": 3
         }
      }
}

59. Executing Verilog backend.
Dumping module `\flex_counter'.

Warnings: 2 unique messages, 2 total
End of script. Logfile hash: 36aa0f52ee, CPU: user 0.46s system 0.02s, MEM: 49.16 MB peak
Yosys 0.33 (git sha1 2584903a060, clang++ 11.1.0 -fPIC -Os)
Time spent: 48% 2x abc (0 sec), 15% 2x read_liberty (0 sec), ...
