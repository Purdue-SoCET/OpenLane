
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.33 (git sha1 2584903a060, clang++ 11.1.0 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.
Reading SCL library '/root/.volare/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib' as a blackboxâ¦

1. Executing Liberty frontend: /root/.volare/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib
Imported 428 cell types from liberty file.

2. Executing Verilog-2005 frontend: /root/nixopenlane/openlane2/desflow1/flex_counter.sv
Parsing SystemVerilog input from `/root/nixopenlane/openlane2/desflow1/flex_counter.sv' to AST representation.
Generating RTLIL representation for module `\flex_counter'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: /root/nixopenlane/openlane2/desflow1/synchronizer.sv
Parsing SystemVerilog input from `/root/nixopenlane/openlane2/desflow1/synchronizer.sv' to AST representation.
Generating RTLIL representation for module `\synchronizer'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: /root/nixopenlane/openlane2/desflow1/top_level.sv
Parsing SystemVerilog input from `/root/nixopenlane/openlane2/desflow1/top_level.sv' to AST representation.
Generating RTLIL representation for module `\top_level'.
Successfully finished Verilog frontend.

5. Executing HIERARCHY pass (managing design hierarchy).

5.1. Analyzing design hierarchy..
Top module:  \flex_counter

5.2. Analyzing design hierarchy..
Top module:  \flex_counter
Removing unused module `\top_level'.
Removing unused module `\synchronizer'.
Removed 2 unused modules.
Renaming module flex_counter to flex_counter.

6. Executing PROC pass (convert processes to netlists).

6.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

6.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 5 switch rules as full_case in process $proc$/root/nixopenlane/openlane2/desflow1/flex_counter.sv:0$8 in module flex_counter.
Marked 2 switch rules as full_case in process $proc$/root/nixopenlane/openlane2/desflow1/flex_counter.sv:0$3 in module flex_counter.
Marked 1 switch rules as full_case in process $proc$/root/nixopenlane/openlane2/desflow1/flex_counter.sv:13$1 in module flex_counter.
Removed a total of 0 dead cases.

6.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 2 redundant assignments.
Promoted 2 assignments to connections.

6.4. Executing PROC_INIT pass (extract init attributes).

6.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \nRST in `\flex_counter.$proc$/root/nixopenlane/openlane2/desflow1/flex_counter.sv:13$1'.

6.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~7 debug messages>

6.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\flex_counter.$proc$/root/nixopenlane/openlane2/desflow1/flex_counter.sv:0$8'.
     1/5: $5\next_count[3:0]
     2/5: $4\next_count[3:0]
     3/5: $3\next_count[3:0]
     4/5: $2\next_count[3:0]
     5/5: $1\next_count[3:0]
Creating decoders for process `\flex_counter.$proc$/root/nixopenlane/openlane2/desflow1/flex_counter.sv:0$3'.
     1/2: $2\next_flag[0:0]
     2/2: $1\next_flag[0:0]
Creating decoders for process `\flex_counter.$proc$/root/nixopenlane/openlane2/desflow1/flex_counter.sv:13$1'.
     1/2: $0\count[3:0]
     2/2: $0\flag[0:0]

6.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\flex_counter.\next_count' from process `\flex_counter.$proc$/root/nixopenlane/openlane2/desflow1/flex_counter.sv:0$8'.
No latch inferred for signal `\flex_counter.\next_flag' from process `\flex_counter.$proc$/root/nixopenlane/openlane2/desflow1/flex_counter.sv:0$3'.

6.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\flex_counter.\count' using process `\flex_counter.$proc$/root/nixopenlane/openlane2/desflow1/flex_counter.sv:13$1'.
  created $adff cell `$procdff$68' with positive edge clock and negative level reset.
Creating register for signal `\flex_counter.\flag' using process `\flex_counter.$proc$/root/nixopenlane/openlane2/desflow1/flex_counter.sv:13$1'.
  created $adff cell `$procdff$69' with positive edge clock and negative level reset.

6.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

6.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 5 empty switches in `\flex_counter.$proc$/root/nixopenlane/openlane2/desflow1/flex_counter.sv:0$8'.
Removing empty process `flex_counter.$proc$/root/nixopenlane/openlane2/desflow1/flex_counter.sv:0$8'.
Found and cleaned up 2 empty switches in `\flex_counter.$proc$/root/nixopenlane/openlane2/desflow1/flex_counter.sv:0$3'.
Removing empty process `flex_counter.$proc$/root/nixopenlane/openlane2/desflow1/flex_counter.sv:0$3'.
Removing empty process `flex_counter.$proc$/root/nixopenlane/openlane2/desflow1/flex_counter.sv:13$1'.
Cleaned up 7 empty switches.

6.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module flex_counter.
<suppressed ~12 debug messages>

End of script. Logfile hash: 724e05e45e, CPU: user 0.20s system 0.03s, MEM: 45.99 MB peak
Yosys 0.33 (git sha1 2584903a060, clang++ 11.1.0 -fPIC -Os)
Time spent: 70% 2x read_liberty (0 sec), 19% 1x proc_dff (0 sec), ...
