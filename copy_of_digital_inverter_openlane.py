# -*- coding: utf-8 -*-
"""Copy of digital-inverter-openlane.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UkwtqB3w964iC2OSqTMUVTxry13yQz2Q

# Digital inverter with OpenLane

```
Copyright 2022 Google LLC.
SPDX-License-Identifier: Apache-2.0
```

Run a simple digital inverter design thru the [OpenLane](https://github.com/The-OpenROAD-Project/OpenLane/) GDS to RTL flow targeting the [open source SKY130 PDK](https://github.com/google/skywater-pdk/).
"""

# Commented out IPython magic to ensure Python compatibility.
#@title Install dependencies {display-mode: "form"}
#@markdown - Click the â–· button to setup the digital design environment based on [conda-eda](https://github.com/hdl/conda-eda).

openlane_version = 'latest' #@param {type:"string"}
open_pdks_version = 'latest' #@param {type:"string"}

if openlane_version == 'latest':
  openlane_version = ''
if open_pdks_version == 'latest':
  open_pdks_version = ''

import os
import pathlib

!curl -Ls https://micro.mamba.pm/api/micromamba/linux-64/latest | tar -xj bin/micromamba
conda_prefix_path = pathlib.Path('conda-env')
CONDA_PREFIX = str(conda_prefix_path.resolve())
!bin/micromamba create --yes --prefix $CONDA_PREFIX
!echo 'python ==3.7*' >> {CONDA_PREFIX}/conda-meta/pinned
!CI=0 bin/micromamba install --yes --prefix $CONDA_PREFIX \
                     --channel litex-hub \
                     --channel main \
                     openlane={openlane_version} \
                     open_pdks.sky130a={open_pdks_version}
!python -m pip install gdstk gdstk
PATH = os.environ['PATH']
# %env CONDA_PREFIX={CONDA_PREFIX}
# %env PATH={CONDA_PREFIX}/bin:{PATH}

"""## Write verilog"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile inverter.v
# module inverter(input wire in, output wire out);
#     assign out = !in;
# endmodule

"""## Write configuration

[Documentation](https://openlane.readthedocs.io/en/latest/reference/configuration.html)
"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile config.json
# {
#     "DESIGN_NAME": "inverter",
#     "VERILOG_FILES": "dir::inverter.v",
#     "CLOCK_TREE_SYNTH": false,
#     "CLOCK_PORT": null,
#     "PL_RANDOM_GLB_PLACEMENT": true,
#     "FP_SIZING": "absolute",
#     "DIE_AREA": "0 0 34.5 57.12",
#     "PL_TARGET_DENSITY": 0.75,
#     "FP_PDN_AUTO_ADJUST": false,
#     "FP_PDN_VPITCH": 25,
#     "FP_PDN_HPITCH": 25,
#     "FP_PDN_VOFFSET": 5,
#     "FP_PDN_HOFFSET": 5,
#     "DIODE_INSERTION_STRATEGY": 3
# }

"""## Run OpenLane Flow

[OpenLane](https://openlane.readthedocs.io/en/latest/) is an automated [RTL](https://en.wikipedia.org/wiki/Register-transfer_level) to [GDSII](https://en.wikipedia.org/wiki/GDSII) flow based on several components including [OpenROAD](https://theopenroadproject.org/), [Yosys](https://yosyshq.net/yosys/), [Magic](http://www.opencircuitdesign.com/magic/), [Netgen](http://opencircuitdesign.com/netgen/) and custom methodology scripts for design exploration and optimization targeting [open source PDKs](https://github.com/google/open-source-pdks).

![img](https://openlane.readthedocs.io/en/latest/_images/flow_v1.png)
"""

# Commented out IPython magic to ensure Python compatibility.
# %env PDK=sky130A
!flow.tcl -design .

"""## Display layout"""

import pathlib
import gdstk
import IPython.display

gdss = sorted(pathlib.Path('runs').glob('*/results/final/gds/*.gds'))
library = gdstk.read_gds(gdss[-1])
top_cells = library.top_level()
top_cells[0].write_svg('inverter.svg')
IPython.display.SVG('inverter.svg')

"""## Metrics

[Documentation](https://openlane.readthedocs.io/en/latest/reference/datapoint_definitions.html)

"""

import pandas as pd
import pathlib

pd.options.display.max_rows = None
reports = sorted(pathlib.Path('runs').glob('*/reports/metrics.csv'))
df = pd.read_csv(reports[-1])
df.transpose()